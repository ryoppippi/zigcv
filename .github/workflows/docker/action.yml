name: docker_build
description: Build and push Docker images

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - name: Set up QEMU
      if: ${{ inputs.cross_compile }}
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Cache Docker layers
      id: docker_cache
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile') }}-${{ inputs.cross_compile }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: create tag
      shell: bash
      run: |
        IMAGE="ghcr.io/${{ github.repository }}"
        SHA=${{ github.sha }}
        IMAGE_LATEST="$IMAGE:latest"
        IMAGE_SHA="$IMAGE:$SHA"
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
           TAGS="$IMAGE_SHA,$IMAGE_LATEST"
        else
           TAGS=$IMAGE_SHA
        fi

        echo "IMAGE=$IMAGE" >> $GITHUB_ENV
        echo "IMAGE_LATEST=$IMAGE_LATEST" >> $GITHUB_ENV
        echo "IMAGE_SHA=$IMAGE_SHA" >> $GITHUB_ENV
        echo "TAGS=$TAGS" >> $GITHUB_ENV

        if [${{ inputs.cross_compile }}]; then
          echo "DOCKER_PLATFORMS=linux/amd64" >> $GITHUB_ENV
        else
          echo "DOCKER_PLATFORMS='linux/amd64,linux/arm/v7,linux/arm64'" >> $GITHUB_ENV
        fi

        echo TAGS $TAGS
    - name: Login GitHub Packages
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Pull the latest image
      shell: bash
      if: steps.docker_cache.outputs.cache-hit != 'true'
      run: docker pull ${{ env.IMAGE_LATEST }} || true
    - uses: docker/build-push-action@v2
      id: build-image
      with:
        push: true
        platforms: ${{ env.DOCKER_PLATFORMS }}
        tags: ${{ env.TAGS }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
    - name: Move cache
      shell: bash
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
